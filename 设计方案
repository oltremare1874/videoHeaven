用户相关
@RequestMapping("/User)    


注册：register （前端传后端数据库保存）
    user_id：自动+1
    user_account：前端获取
    user_password ： 前端获取
    user_name： 前端获取
    user_icon： 设为空
    user_signature  ： 设为空
    del=0
注册接口："/getIsRegister"
后端： @GetMapping("/getIsRegister")    
        public String getIsRegister(String account, String password，String name) {return string="true"/"false"}
前端：axios.get('http://localhost:8888/User/getIsRegister',{
      params:{ 
        account: user_account.value
        password: user_password.value
        name: user_name.value
      }
      }).then((respond) => {***


登录：login （用后端数据进行匹配）
  账号：user_account
  密码：user_password
登录接口："/getIsLoginn"
后端： @GetMapping("/getIsLogin")    
        public String getIsLogin(String account, String password) {return string="true"/"false"}
前端：axios.get('http://localhost:8888/User/getIsLogin',{
      params:{
        account: user_account.value
        password: *
      }
      }).then((respond) => {***
PS：登录成功后user_account要保留到前端以便后续操作

个人信息页面
信息接口(user_name, user_icon, user_signature, user_favorite_num)："/getUserPersonalInformation"
后端： @GetMapping("/getUserPersonalInformation")    
        public List getUserPersonalInformation(String userId) { return userService.getUserPersonalInformation(userId);}
前端：axios.get('http://localhost:8888/User/getUserPersonalInformation',{
      params:{
        userId: user_id.value
      }
      }).then((respond) => {***



修改昵称接口："/updateUserName"
后端： @PostMapping("/updateUserName")
      public boolean updateUserName(@RequestParam int userId,@RequestParam String userName){
        return userService.updateUserName(userId, userName);
    }
前端：axios.get('http://localhost:8888/User/UpdateUsername',{
      params:{
        userId: user_id.value
        userName: *
      }
      }).then((respond) => {***

修改头像接口："/updateUserIcon"
后端： @GetMapping("/UpdateUsericon")    
        public * UpdateUsericon(String userId, String Newicon) {return *}
前端：axios.get('http://localhost:8888/User/updateUserIcon',{
      params:{
        userid: user_id.value
        Newicon: *
      }
      }).then((respond) => {***


修改个性签名接口："/updateUserSignature"
后端： public boolean updateUserSignature(@RequestParam int userId,@RequestParam String userSignature){
        return userService.updateUserSignature(userId, userSignature);
    }
前端：axios.get('http://localhost:8888/User/updateUserSignature',{
      params:{
        userid: user_id.value
        userSignature: *
      }
      }).then((respond) => {***

根据用户账号查询用户id:"/getUserIdByUserAccount"
后端:@GetMapping("/getUserIdByUserAccount")
    public int getUserIdByUserAccount(@RequestParam String userAccount){
        return userService.getUserIdByUserAccount(userAccount);
    }
前端：axios.get('http://localhost:8888/User/getUserIdByUserAccount',{
      params:{
        userAccount: user_account.value
      }
      }).then((respond) => {***





视频相关
@RequestMapping("/Video)   
视频信息页面
信息接口："/getVideoInformation" 
后端： @GetMapping("/getVideoInformation")    
        public List getVideoInformation(String title) {return list*}
前端：axios.get('http://localhost:8888/Video/getVideoInformation',{
      params:{
        title: video_title.value
      }
      }).then((respond) => {***

@RequestMapping("/Video/interaction")
改变点赞状态："/toggleLike"
后端：PostMapping("/toggleLike")
    public boolean toggleLike(@RequestParam int userId,@RequestParam int videoId){
        return videoInteractionService.toggleLike(userId, videoId);
    }
前端：axios.get('http://localhost:8888/Video/interaction/toggleLike',{
      params:{
        userId: user_id.value
        videoId: video_id.value
      }
      }).then((respond) => {***


判断用户对视频是否点赞成功："/isLiked"
后端：GetMapping("/isLiked")
    public boolean isLiked(@RequestParam int userId,@RequestParam int videoId){
        return videoInteractionService.isLiked(userId, videoId);
    }

前端：axios.get('http://localhost:8888/Video/interaction/isLiked',{
      params:{
        userId: user_id.value
        videoId: video_id.value
      }
      }).then((respond) => {***



改变收藏状态："/toggleFavorite"
后端：PostMapping("/toggleFavorite")
    public boolean toggleFavorite(@RequestParam int userId,@RequestParam int videoId){
        return videoInteractionService.toggleFavorite(userId, videoId);
    }
前端：axios.get('http://localhost:8888/Video/interaction/toggleFavorite',{
      params:{
        userId: user_id.value
        videoId: video_id.value
      }
      }).then((respond) => {***



判断用户对视频是否收藏："/isFavorited"
后端：@GetMapping("/isFavorited")
    public boolean isFavorited(@RequestParam int userId,@RequestParam int videoId){
        return videoInteractionService.isFavorited(userId, videoId);
    }
前端：axios.get('http://localhost:8888/Video/interaction/isFavorited',{
      params:{
        userId: user_id.value
        videoId: video_id.value
      }
      }).then((respond) => {***


根据用户id查询用户收藏的所有视频(使用分步查询):"/getUserFavorites"
后端：@GetMapping("/getUserFavorites")
    public List<Video> getUserFavorites(@RequestParam int userId){
        return videoInteractionService.getUserFavorites(userId);
    }
前端:axios.get('http://localhost:8888/Video/interaction/getUserFavorites',{
      params:{
        userId: user_id.value
      }
      }).then((respond) => {***


根据用户id查询用户收藏的所有视频，返回所有收藏的视频,使用关联查询:"/getFavoriteVideoByUserId"
后端:@GetMapping("/getFavoriteVideosByUserId")
    public List<Video> getFavoriteVideosByUserId(@RequestParam int userId){
        return videoInteractionService.getFavoriteVideosByUserId(userId);
    }
前端::axios.get('http://localhost:8888/Video/interaction/getFavoriteVideosByUserId',{
      params:{
        userId: user_id.value
      }
      }).then((respond) => {***



添加观看记录，成功添加返回true，失败返回false:"/addViewRecord"
后端：@PostMapping("/addViewRecord")
    public boolean addViewRecord(@RequestParam int userId,@RequestParam int videoId){
        return videoInteractionService.addViewRecord(userId, videoId);
    }
前端:axios.get('http://localhost:8888/Video/interaction/addViewRecord',{
      params:{
        userId: user_id.value
        videoId: video_id.value
      }
      }).then((respond) => {***



查询观看记录，对于观看多次的视频只显示最近一次，返回按时间排序的观看记录列表和视频信息列表:"/getLatestViewRecordsByUserId"
后端：@GetMapping("/getLatestViewRecordsByUserId")
    public List<ViewRecord> getLatestViewRecordsByUserId(@RequestParam int userId) {
        return videoInteractionService.getLatestViewRecordsByUserId(userId);
    }
前端:axios.get('http://localhost:8888/Video/interaction/addViewRecord',{
      params:{
        userId: user_id.value
      }
      }).then((respond) => {***


添加转发记录，成功添加返回true，失败返回false
后端：@PostMapping("/addRepost")
    public boolean addRepost(@RequestParam int userId,@RequestParam int videoId){
        return videoInteractionService.addRepost(userId, videoId);
    }
前端：








@RequestMapping("/Comment")
评论相关：需要返回评论者头像，昵称，对视频的评分(五分制)，评论(可多次评论和评分)

后端：添加评论，同时增加评论数，修改评分，需提供userId，videoId，commentContent，rating,添加成功返回添加的评论的id，失败返回(报错信息)
    @PostMapping("/addComment")
    public int addComment(@RequestParam int userId, @RequestParam int videoId,
                          @RequestParam String commentContent, @RequestParam int rating){
        return commentService.addComment(userId, videoId, commentContent, rating);
    }
前端：





逻辑删除评论，同时减少评论数，修改评分，需提供评论id，成功则返回true，失败返回false
    @PostMapping("/removeComment")
    public boolean removeComment(@RequestParam int commentId){
        return commentService.removeComment(commentId);
    }
前端：







根据视频id获取该视频所有评论，按评论时间由近到远排序，返回视频评论信息(comment_id,user_id,video_id,comment_content,created_at（评论时间）)和用户昵称，用户头像
后端:@GetMapping("/getCommentsByVideoId")
    public List<CommentWithUser> getCommentsByVideoId(@RequestParam int videoId){
        return commentService.getCommentsByVideoId(videoId);
    }
前端：



































